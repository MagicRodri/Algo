 Pull request. A way for you to submit a contribution to another developer's repository on GitHub. First, find a GitHub repo that you want to contribute to. Hmm, this looks like a good one. Submit a pull request and get a free sticker in the mail. The first thing you'll need to do is fork the repo. When you fork a repo, it will be copied over to your own GitHub account. The fork maintains a link to the original upstream repo, and that means you can pull in future changes when necessary. From there, you'll want to clone your fork onto your local system so you can start developing your own changes. Next, open up the project in your preferred code editor. Use the Git branch command to create a new branch that describes the changes that you're going to make. Use Git switch or checkout to move into that branch. Now it's your job to make this software better. This particular repo tells us how to encrypt our address so we can upload it and get a free sticker. After you make your changes, use Git add to stage the files and then Git commit to commit them to the repo. Now we need to get our files back to GitHub. Git push is the command that can do that. We tell it to use origin, which is a remote repository on GitHub, followed by the branch name that we're currently working on. When we go back to our fork on GitHub, we should see our changes, as well as a button to open a new pull request. Make sure that you follow the contribution guidelines for the owner's repo carefully, because it's typically bad GitHub etiquette to submit a pull request without first discussing it in the issues. But if you're confident about your changes, go ahead and click the green button. And that's all there is to it. After your PR is merged, you should receive a sticker in the mail a few weeks later. But we still have a few seconds to kill, so here's a little pro tip. When working with a fork locally, you can keep it in sync with the original. By first adding a remote link to the upstream repo. Now in things change in that repo, you can use Git fetch to download the changes, and then Git rebase to add those changes on top of your existing work. And stay tuned for a future video all about Git rebase. This has been your first GitHub pull request in 100 seconds. Make sure to hit the like button if you want to see more short videos like this. Thanks for watching, and I will see you in the next one.